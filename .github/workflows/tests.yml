name: gen_pack
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Ubuntu deps
        run: |
          sudo apt-get update
          sudo apt-get install \
            shellcheck

      - uses: ammaraskar/gcc-problem-matcher@0f9c86f9e693db67dacf53986e1674de5f2e5f28 # master

      - name: Run ShellCheck
        run: |
          shellcheck -s bash -f gcc gen-pack lib/*

  cov:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Ubuntu deps
        run: |
          sudo apt-get update
          sudo apt-get install \
            dos2unix \
            kcov

      - name: Run kcov
        run: |
          ./test/run_cov.sh

      - name: Publish coverage report to QLTY
        uses: qltysh/qlty-action/coverage@a19242102d17e497f437d7466aa01b528537e899 # v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: ${{github.workspace}}/test/cov/all/kcov-merged/cov.xml
          skip-errors: false

  tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-14, macos-15-intel, ubuntu-22.04, ubuntu-24.04, ubuntu-22.04-arm, ubuntu-24.04-arm, windows-2022 ]
        include:
          - os: macos-15-intel
            target: darwin-amd64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: macos-14
            target: darwin-arm64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: ubuntu-22.04
            target: linux-amd64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: ubuntu-24.04
            target: linux-amd64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: ubuntu-22.04-arm
            target: linux-arm64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: ubuntu-24.04-arm
            target: linux-arm64
            archiveext: tar.gz
            unarcmd: tar -xzf
          - os: windows-2022
            target: windows-amd64
            archiveext: zip
            unarcmd: 7z x
    env:
       CMSIS_PACK_ROOT: ${{ github.workspace }}/.packs/
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive

      - name: Install Ubuntu deps
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install \
            dos2unix \
            libxml2-utils

      - name: Install MacOS deps
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install \
            bash \
            coreutils \
            dos2unix \
            gnu-tar \
            grep

      - name: Install CMSIS-Toolbox
        shell: bash
        run: |
          curl -L https://github.com/Open-CMSIS-Pack/cmsis-toolbox/releases/download/2.7.0/cmsis-toolbox-${{ matrix.target }}.${{ matrix.archiveext }} -o cmsis-toolbox-${{ matrix.target }}.${{ matrix.archiveext }}
          ${{ matrix.unarcmd }} cmsis-toolbox-${{ matrix.target }}.${{ matrix.archiveext }}
          echo "$(pwd)/cmsis-toolbox-${{ matrix.target }}/bin" >> $GITHUB_PATH

      - name: Install pack ARM.CMSIS
        shell: bash
        run: |
          cpackget init https://www.keil.com/pack/index.pidx
          cpackget add -a ARM.CMSIS

      - name: Run unit tests
        shell: bash
        env:
          LANG: en_GB.UTF-8
          LC_ALL: en_GB.UTF-8
          TMPDIR: ${{ github.workspace }}/../../tmp
        run: |
          mkdir -p ${TMPDIR}
          ./test/run_all.sh
