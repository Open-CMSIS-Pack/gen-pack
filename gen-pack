#
# Open-CMSIS-Pack gen-pack Bash library
#
# Copyright (c) 2022-2023 Arm Limited. All rights reserved.
#
# Provided as-is without warranty under Apache 2.0 License
# SPDX-License-Identifier: Apache-2.0
#

GEN_PACK_LIB_VERSION="0.8.6"
GEN_PACK_LIB_SOURCE="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"

shopt -s expand_aliases

if [ "$(cut -d. -f1 <<<"${BASH_VERSION}")" -lt 5 ]; then
  echo "gen-pack requires Bash version 5 or later." >&2
  echo "Running Bash version is ${BASH_VERSION}!" >&2
  case $(uname -s) in
    'WindowsNT'|MINGW*|CYGWIN*)
      echo "Update MSYS2/MinGW, or install latest Git for Windows." >&2
      ;;
    'Darwin')
      echo "Get Homebrew and run brew install bash." >&2
      ;;
    *)
      echo "Check your OS package manager for Bach v5." >&2
      ;;
  esac
  echo ""
  echo "If Bash v5 is installed but not used as the interpreter,"
  echo "check the shebang line of the enclosing gen_pack.sh."
  echo "To be OS agnostic the shebang should be #!/usr/bin/env bash"
  echo "and Bash v5 executable must be the default one according"
  echo "to your systems PATH order."
  echo ""
  exit 1
fi

echo "Loading gen-pack library ${GEN_PACK_LIB_VERSION} from ${GEN_PACK_LIB_SOURCE}"

. "${GEN_PACK_LIB_SOURCE}/lib/patches"
. "${GEN_PACK_LIB_SOURCE}/lib/usage"
. "${GEN_PACK_LIB_SOURCE}/lib/getopts"
. "${GEN_PACK_LIB_SOURCE}/lib/utilities"
. "${GEN_PACK_LIB_SOURCE}/lib/pdsc"
. "${GEN_PACK_LIB_SOURCE}/lib/gittools"
. "${GEN_PACK_LIB_SOURCE}/lib/logging"
. "${GEN_PACK_LIB_SOURCE}/lib/helper"

check_locale

check_placeholder "PACK_DIRS"
check_placeholder "PACK_BASE_FILES"
check_placeholder "PACK_DELETE_FILES"
check_placeholder "PACK_PATCH_FILES"
check_placeholder "PACKCHK_DEPS"
PACK_CHANGELOG_MODE="${PACK_CHANGELOG_MODE:-full}"
check_placeholder "PACK_CHANGELOG_MODE"

#
# Add directories listed in PACK_DIRS to build folder.
# An empty PACK_DIRS setting picks up all folders.
#
# Usage: add_dirs <build>
#  <build>   The temporary build folder, typically PACK_BUILD
#
function add_dirs {
  # Add directories
  if [ -z "${PACK_DIRS}" ]; then
    echo_log "PACK_DIRS is empty, defaulting to all folders."
    PACK_DIRS=$(OIFS="$IFS"; IFS=$'\n'; find . -maxdepth 1 -type d -not -name ".*" -not -path "./$(realpath --relative-to="$(pwd)" "${PACK_BUILD}")" -not -path "./$(realpath --relative-to="$(pwd)" "${PACK_OUTPUT}")"; IFS="$OIFS")
  fi
  echo_log Adding directories to pack:
  echo_log "${PACK_DIRS}"
  echo_log " "
  for d in ${PACK_DIRS}; do
    d=$(realpath --relative-to="$(pwd)" "$d")
    if [[ $d = ../* ]]; then
      cp -r "$d" "$1"
    else
      cp -r --parents "$d" "$1"
    fi
  done
}

#
# Add single files listed in PACK_BASE_FILES to build folder.
#
# Usage: add_files <build>
#  <build>   The temporary build folder, typically PACK_BUILD
#
#
function add_files {
  # Add files
  if [ -n "${PACK_BASE_FILES}" ]; then
    echo_log Adding files to pack:
    echo_log "${PACK_BASE_FILES}"
    echo_log " "
    for f in ${PACK_BASE_FILES}; do
      d=$(realpath --relative-to="$(pwd)" "$f")
      if [[ $f = ../* ]]; then
        cp -r "$f" "$1"
      else
        cp -f --parents "$f" "$1/"
      fi
    done
  else
    echo_log "PACK_BASE_FILES is empty, no additional files to be copied."
  fi
}

#
# Remove specific files listed in PACK_DELETE_FILES from build folder.
#
# Usage: delete_files <build>
#  <build>   The temporary build folder, typically PACK_BUILD
#
function delete_files {
  # Delete files
  if [ -n "${PACK_DELETE_FILES}" ]; then
    echo_log Deleting files from pack:
    echo_log "${PACK_DELETE_FILES}"
    echo_log " "
    for f in ${PACK_DELETE_FILES}; do
      find "$(dirname "$1/$f")" -name "$(basename "$1/$f")" -exec rm -rf "{}" +
    done
  else
    echo_log "PACK_DELETE_FILES is empty, no files to be removed."
  fi
}

#
# Apply patches listed in PACK_PATCH_FILES to files in build folder.
#
# Usage: apply_patches <build>
#  <build>   The temporary build folder, typically PACK_BUILD
#
function apply_patches {
  # Apply patches
  if [ -n "${PACK_PATCH_FILES}" ]; then
    echo_log Applying patches to pack:
    echo_log "${PACK_PATCH_FILES}"
    echo_log " "
    local cwd 
    cwd=$(pwd)
    pushd "$1" > /dev/null || exit
    for f in ${PACK_PATCH_FILES}; do
      local lineendings
      lineendings=$(head -1 "${cwd}/${f}" | cat -vet | sed -E 's/^[^^$]*//' | sed -E 's/\$/LF/' | sed -E 's/.*\^M/CR/')
      if [[ "${lineendings}" != "LF" ]]; then
        echo_log "Patch file ${f} has ${lineendings} line terminators but should have LF only."
        case ${lineendings} in
          CRLF)
            echo_log "  Converting with dos2unix..."
            dos2unix -q "${cwd}/${f}"
          ;;
          CR)
            echo_log "  Converting with mac2unix..."
            mac2unix -q "${cwd}/${f}"
          ;;  
          *)
            echo_err "  No implicit conversion rule avilable!"
            return 1
          ;;
        esac
      fi
      patch -p0 -t -i "${cwd}/${f}"
    done
    popd > /dev/null || exit
  else
    echo_log "PACK_PATCH_FILES is empty, no patches to be applied."
  fi
}

#
# Run pack schema check
#
# Usage: check_schema <pdsc>
#  <pdsc>   The pack description to check
#
function check_schema {
  if [ -z "${UTILITY_XMLLINT}" ]; then
    echo_err "Cannot run schema check when missing xmllint utility!"
    return 1
  fi

  echo_log "Running schema check for $1"
  local CMSISSCHEMA
  CMSISSCHEMA=$(realpath -m "${CMSIS_TOOLSDIR:-.}/../PACK.xsd")
  local SCHEMA="${CMSISSCHEMA}"
  if [ ! -f "$SCHEMA" ]; then
    echo_log "Fetching schema file..."
    local SCHEMAURL
    SCHEMAURL=$(grep -Pio "xs:noNamespaceSchemaLocation=\"\K[^\"]+" "$1")
    local SCHEMAVERSION
    SCHEMAVERSION=$(grep -Pio "schemaVersion=\"\K[^\"]+" "$1")
    local SCHEMA="${TEMP:-/tmp}/PACK.xsd"
    curl_download "${SCHEMAURL}" "${SCHEMA}"
    local errorlevel=$?
    if [ $errorlevel -ne 0 ]; then
        echo_err "Schema referenced in PDSC file not found. Looking for schema with version '${SCHEMAVERSION}' ..."
        curl_download "https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/blob/v${SCHEMAVERSION}/schema/PACK.xsd" "${SCHEMA}"
        errorlevel=$?
    fi
    if [ $errorlevel -ne 0 ]; then
        echo_err "Schema referenced by PDSC file's schema version not found. Looking for latest schema ..."
        curl_download "https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/blob/main/schema/PACK.xsd" "${SCHEMA}"
        errorlevel=$?
    fi
    if [ $errorlevel -ne 0 ]; then
        echo_err "build aborted: No schema file could be found!"
        echo_log " "
        echo_log "  Hint: Assure one of the following to get the schema check working."
        echo_log "        - Provide PACK.XSD into '${CMSISSCHEMA}'."
        echo_log "        - Provide schema URL in PDSC file's xs:noNamespaceSchemaLocation attribute."
        echo_log "        - Provide schema release tag version in PDSC file's schemaVersion attribute."
        echo_log "        Available schema releases are listed on https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/tags."
        echo_log " "
        exit $errorlevel
    fi
  fi
  echo_v "\"${UTILITY_XMLLINT}\" --noout --schema \"${SCHEMA}\" \"$1\""
  "${UTILITY_XMLLINT}" --noout --schema "${SCHEMA}" "$1"
  local errorlevel=$?
  if [ $errorlevel -ne 0 ]; then
    echo_err "build aborted: Schema check of $1 against ${SCHEMA} failed!"
    echo_err " "
    exit 1
  fi
}

#
# Run packchk
#
# Usage: check_pack <pdsc>
#  <pdsc>   The pack description to check
#
function check_pack {
  PACKCHK_DEPS="${PACKCHK_DEPS:-ARM.CMSIS.pdsc}"
  local dependencies
  dependencies=$(grep -Pio "<package\s+\Kvendor=\"[^\"]+\"\s+name=\"[^\"]+\"" "$1" \
   | sed -E 's/vendor="([^"]*)"[ ]*name="([^"]*)"/\1.\2.pdsc/')
  declare -a include
  local webdir="${CMSIS_PACK_ROOT}/.Web"
  if [ ! -d "${webdir}" ]; then
    mkdir -p "${webdir}"
  fi
  for dep in ${PACKCHK_DEPS} ${dependencies}; do
    if [ ! -f "${webdir}/${dep}" ]; then
      curl_download "https://www.keil.com/pack/${dep}" "${webdir}/${dep}"
    fi
    include+=(-i "${webdir}/${dep}")
  done
  if [ "${UTILITY_PACKCHK_HAS_SCHEMACHECK}" -eq 0 ]; then
    PACKCHK_ARGS+=(--disable-validation)
  fi
  # shellcheck disable=SC2086
  echo_v "\"${UTILITY_PACKCHK}\" ${include[*]} -n \"${PACK_OUTPUT}/PackName.txt\"" "${PACKCHK_ARGS[@]}" \"$1\"
  "${UTILITY_PACKCHK}" "${include[@]}" -n "${PACK_OUTPUT}/PackName.txt" "${PACKCHK_ARGS[@]}" "$1"
  local errorlevel=$?
  if [ $errorlevel -ne 0 ]; then
    echo_err "build aborted: pack check failed"
    echo_err " "
    exit 1
  fi
}

#
# Create checksum file for the pack content
# The checksum file is placed to <build>/<vendor>.<pack>.sha1
#
# Usage: create_sha1 <build> <vendor> <pack>
#   <build>   Pack build folder
#   <vendor>  Pack vendor name
#   <pack>    Pack name
#
function create_sha1 {
  pushd "$1" > /dev/null || exit
  find . -type f -exec "${UTILITY_SHA1SUM}" -b {} + > "${TEMP:-/tmp}/$2.$3.sha1"
  mv "${TEMP:-/tmp}/$2.$3.sha1" "$2.$3.sha1"
  popd > /dev/null || exit
}

#
# Top level function to generate a pack.
#
function gen_pack {
  getopts "$@"
  set -- "${POSITIONAL[@]}" # restore positional parameters

  echo_log "Starting CMSIS-Pack Generation: $(date)"
  echo_log "  in $(pwd)"
  echo_log ""

  find_pack_root
  find_zip
  find_packchk
  find_xmllint
  find_sha1sum
  if [ -n "${UTILITY_XMLLINT}" ]; then
    find_curl
  fi
  if [ -n "${CHANGELOG+x}" ]; then
    find_git
    case ${PACK_CHANGELOG_MODE} in
      'full'|'release')
        find_ghcli
      ;;
      'tag')
        echo_v "Skipping ghcli"
      ;;
      *)
        echo_err "PACK_CHANGELOG_MODE has invalid value '${PACK_CHANGELOG_MODE}'!"
        echo_log "  Valid options are: full, release, or tag."
        echo_log "  Defaulting to: full"
        PACK_CHANGELOG_MODE="full"
        find_ghcli
      ;;
    esac
  fi

  echo_log " "

  PACK_DESCRIPTION_FILE=$(locate_pdsc "$1")
  fail_and_bail $?
  echo_log "PDSC       is located in ${PACK_DESCRIPTION_FILE}"
  echo_log " "

  PACK_BASEDIR=$(dirname "${PACK_DESCRIPTION_FILE}")
  PACK_VENDOR=$(pdsc_vendor "${PACK_DESCRIPTION_FILE}")
  PACK_NAME=$(pdsc_name "${PACK_DESCRIPTION_FILE}")
  echo_log "Generating Pack for ${PACK_VENDOR}.${PACK_NAME}"

  PACK_BUILD=$(realpath "${PACK_BASEDIR}/${PACK_BUILD:-build}")
  PACK_OUTPUT=$(realpath "${PACK_BASEDIR}/${PACK_OUTPUT:-output}")
  PACK_BUILD_DESCRIPTION_FILE="${PACK_BUILD}/$(basename "${PACK_DESCRIPTION_FILE}")"

  echo_log " via ${PACK_BUILD}"
  echo_log " to ${PACK_OUTPUT}"
  echo_log ""

  if [ -d "${PACK_BUILD}" ]; then
    rm -r "${PACK_BUILD}"
  fi
  mkdir -p "${PACK_BUILD}"
  mkdir -p "${PACK_OUTPUT}"

  pushd "${PACK_BASEDIR}" >/dev/null || exit

  [[ ${PREPROCESS} == 1 && "$(type -t preprocess)" == "function" ]] && preprocess "${PACK_BUILD}"

  if [ -n "${CHANGELOG+x}" ]; then
    echo_log "Generating changelog with mode '${PACK_CHANGELOG_MODE}' ..."
    pdsc_update_releases "${PACK_DESCRIPTION_FILE}" "${PACK_BUILD_DESCRIPTION_FILE}" "${CHANGELOG}"
  else
    cp "${PACK_DESCRIPTION_FILE}" "${PACK_BUILD_DESCRIPTION_FILE}"
  fi

  add_dirs "${PACK_BUILD}"
  add_files "${PACK_BUILD}"
  delete_files "${PACK_BUILD}"
  apply_patches "${PACK_BUILD}"

  [[ ${POSTPROCESS} == 1 && "$(type -t postprocess)" == "function" ]] && postprocess "${PACK_BUILD}"

  check_schema "${PACK_BUILD_DESCRIPTION_FILE}"
  check_pack "${PACK_BUILD_DESCRIPTION_FILE}"
  create_sha1 "${PACK_BUILD}" "${PACK_VENDOR}" "${PACK_NAME}"

  PACK_ARCHIVE="${PACK_OUTPUT}/$(cat "${PACK_OUTPUT}/PackName.txt")"
  archive "${PACK_BUILD}" "${PACK_ARCHIVE}"

  if [[ $KEEP == 0 ]]; then
    echo_log "Cleaning up ${PACK_BUILD}..."
    rm -rf "${PACK_BUILD}"
    rm -f "${PACK_OUTPUT}/PackName.txt"
  fi

  echo_log ""
  echo_log "${LOG_COLOR_GREEN}Pack $(basename "${PACK_ARCHIVE}") generated successfully!"
}
