
GEN_PACK_LIB_VERSION="0.5.1"
GEN_PACK_LIB_SOURCE="$(realpath $(dirname ${BASH_SOURCE}))"

shopt -s expand_aliases

if [[ "$(uname)" == "Darwin"  ]]; then
  alias "cp"="gcp"
  alias "grep"="ggrep"
fi

. "${GEN_PACK_LIB_SOURCE}/lib/usage"
. "${GEN_PACK_LIB_SOURCE}/lib/getopts"
. "${GEN_PACK_LIB_SOURCE}/lib/utilities"
. "${GEN_PACK_LIB_SOURCE}/lib/pdsc"
. "${GEN_PACK_LIB_SOURCE}/lib/gittools"
. "${GEN_PACK_LIB_SOURCE}/lib/logging"

function add_dirs {
  # Add directories
  if [ -z "${PACK_DIRS}" ]; then
    echo "PACK_DIRS is empty, defaulting to all folders." >&2
    PACK_DIRS=$(OIFS="$IFS"; IFS='\n'; find . -maxdepth 1 -type d -not -name ".*" -not -path "./$(realpath --relative-to="$(pwd)" "$PACK_BUILD")" -not -path "./$(realpath --relative-to="$(pwd)" "$PACK_OUTPUT")"; IFS="$OIFS")
  fi
  echo Adding directories to pack:
  echo "${PACK_DIRS}"
  echo " "
  for d in ${PACK_DIRS}; do
    cp -r --parents "$d" "$1"
  done
}

function add_files {
  # Add files
  if [ -n "${PACK_BASE_FILES}" ]; then
    echo Adding files to pack:
    echo "${PACK_BASE_FILES}"
    echo " "
    for f in ${PACK_BASE_FILES}; do
      cp -f --parents "$f" "$1/"
    done
  else
    echo "PACK_BASE_FILES is empty, no additional files to be copied." >&2
  fi
}

function delete_files {
  # Delete files
  if [ -n "${PACK_DELETE_FILES}" ]; then
    echo Deleting files from pack:
    echo "${PACK_DELETE_FILES}"
    echo " "
    for f in ${PACK_DELETE_FILES}; do
      find "$(dirname "$1/$f")" -name "$(basename "$1/$f")" -exec rm -rf "{}" +
    done
  else
    echo "PACK_DELETE_FILES is empty, no files to be removed." >&2
  fi
}

function apply_patches {
  # Apply patches
  if [ -n "${PACK_PATCH_FILES}" ]; then
    echo Applying patches to pack:
    echo "${PACK_PATCH_FILES}"
    echo " "
    local CWD=$(pwd)
    pushd "$1" > /dev/null
    for f in ${PACK_PATCH_FILES}; do
      patch -p0 -t -i "${CWD}/${f}"
    done
    popd > /dev/null
  else
    echo "PACK_PATCH_FILES is empty, no patches to be applied." >&2
  fi
}

function check_schema {
  echo "Running schema check for $1"
  local CMSISSCHEMA=$(realpath -m "${CMSIS_TOOLSDIR:-.}/../PACK.xsd")
  local SCHEMA="${CMSISSCHEMA}"
  if [ ! -f "$SCHEMA" ]; then
    echo "Fetching schema file..."
    local SCHEMAURL=$(grep -Pio "xs:noNamespaceSchemaLocation=\"\K[^\"]+" "$1")
    local SCHEMAVERSION=$(grep -Pio "schemaVersion=\"\K[^\"]+" "$1")
    local SCHEMA="${TEMP:-/tmp}/PACK.xsd"
    curl_download "${SCHEMAURL}" "${SCHEMA}"
    local errorlevel=$?
    if [ $errorlevel -ne 0 ]; then
        echo "Schema referenced in PDSC file not found. Looking for schema with version '${SCHEMAVERSION}' ..." >&2
        curl_download "https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/blob/v${SCHEMAVERSION}/schema/PACK.xsd" "${SCHEMA}"
        errorlevel=$?
    fi
    if [ $errorlevel -ne 0 ]; then
        echo "Schema referenced by PDSC file's schema version not found. Looking for latest schema ..." >&2
        curl_download "https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/blob/main/schema/PACK.xsd" "${SCHEMA}"
        errorlevel=$?
    fi
    if [ $errorlevel -ne 0 ]; then
        echo "build aborted: No schema file could be found!" >&2
        echo " " >&2
        echo "  Hint: Assure one of the following to get the schema check working." >&2
        echo "        - Provide PACK.XSD into '${CMSISSCHEMA}'." >&2
        echo "        - Provide schema URL in PDSC file's xs:noNamespaceSchemaLocation attribute." >&2
        echo "        - Provide schema release tag version in PDSC file's schemaVersion attribute." >&2
        echo "        Available schema releases are listed on https://github.com/Open-CMSIS-Pack/Open-CMSIS-Pack-Spec/tags." >&2
        echo " " >&2
        exit $errorlevel
    fi
  fi
  echo_v "\"${UTILITY_XMLLINT}\" --noout --schema \"${SCHEMA}\" \"$1\""
  "${UTILITY_XMLLINT}" --noout --schema "${SCHEMA}" "$1"
  local errorlevel=$?
  if [ $errorlevel -ne 0 ]; then
    echo "build aborted: Schema check of $1 against ${SCHEMA} failed!" >&2
    echo " " >&2
    exit 1
  fi
}

function check_pack {
  PACKCHK_DEPS="${PACKCHK_DEPS:-ARM.CMSIS.pdsc}"
  local dependencies=$(grep -Pio "<package\s+\Kvendor=\"[^\"]+\"\s+name=\"[^\"]+\"" "$1" \
   | sed -E 's/vendor="([^"]*)"[ ]*name="([^"]*)"/\1.\2.pdsc/')
  local include=""
  local webdir="${CMSIS_PACK_ROOT}/.Web"
  if [ ! -d "${webdir}" ]; then
    mkdir -p "${webdir}"
  fi
  for dep in ${PACKCHK_DEPS} ${dependencies}; do
    if [ ! -f "${webdir}/${dep}" ]; then
      curl_download "https://www.keil.com/pack/${dep}" "${webdir}/${dep}"
    fi
    include="${include} -i ${webdir}/${dep}"
  done
  echo_v "\"${UTILITY_PACKCHK}\" \"$1\" ${include} -n \"${PACK_OUTPUT}/PackName.txt\"" ${PACKCHK_ARGS[@]}
  "${UTILITY_PACKCHK}" "$1" ${include} -n "${PACK_OUTPUT}/PackName.txt" ${PACKCHK_ARGS[@]}
  local errorlevel=$?
  if [ $errorlevel -ne 0 ]; then
    echo "build aborted: pack check failed" >&2
    echo " " >&2
    exit 1
  fi
}

function create_sha1 {
  pushd "$1" > /dev/null
  find . -type f -exec "${UTILITY_SHA1SUM}" -b {} + > "${TEMP:-/tmp}/$2.$3.sha1"
  mv "${TEMP:-/tmp}/$2.$3.sha1" "$2.$3.sha1"
  popd > /dev/null
}

function gen_pack {
  getopts "$@"
  set -- "${POSITIONAL[@]}" # restore positional parameters

  echo "Starting CMSIS-Pack Generation: $(date)"

  find_pack_root
  find_zip
  find_packchk
  find_xmllint
  find_sha1sum
  if [ -n "${UTILITY_XMLLINT}" ]; then
    find_curl
  fi
  if [ -n "${CHANGELOG+x}" ]; then
    find_git
    find_ghcli
  fi

  echo " "

  PACK_DESCRIPTION_FILE=$(locate_pdsc "$1")
  echo "PDSC is ${PACK_DESCRIPTION_FILE}"
  echo " "

  PACK_BASEDIR=$(dirname ${PACK_DESCRIPTION_FILE})
  PACK_VENDOR=$(pdsc_vendor "${PACK_DESCRIPTION_FILE}")
  PACK_NAME=$(pdsc_name "${PACK_DESCRIPTION_FILE}")
  echo "Generating Pack for $PACK_VENDOR.$PACK_NAME"

  PACK_BUILD=$(realpath "${PACK_BASEDIR}/${PACK_BUILD}")
  PACK_OUTPUT=$(realpath "${PACK_BASEDIR}/${PACK_OUTPUT}")
  PACK_BUILD_DESCRIPTION_FILE="${PACK_BUILD}/$(basename ${PACK_DESCRIPTION_FILE})"

  echo " via ${PACK_BUILD}"
  echo " to ${PACK_OUTPUT}"
  echo ""

  if [ -d "${PACK_BUILD}" ]; then
    rm -r "${PACK_BUILD}"
  fi
  mkdir -p "${PACK_BUILD}"
  mkdir -p "${PACK_OUTPUT}"

  pushd ${PACK_BASEDIR} >/dev/null

  [[ ${PREPROCESS} == 1 && "$(type -t preprocess)" == "function" ]] && preprocess

  if [ -n "${CHANGELOG+x}" ]; then
    pdsc_update_releases "${PACK_DESCRIPTION_FILE}" "${PACK_BUILD_DESCRIPTION_FILE}" "${CHANGELOG}"
  else
    cp "${PACK_DESCRIPTION_FILE}" "${PACK_BUILD_DESCRIPTION_FILE}"
  fi

  add_dirs "${PACK_BUILD}"
  add_files "${PACK_BUILD}"
  delete_files "${PACK_BUILD}"
  apply_patches "${PACK_BUILD}"

  check_schema "${PACK_BUILD_DESCRIPTION_FILE}"
  check_pack "${PACK_BUILD_DESCRIPTION_FILE}"
  create_sha1 "${PACK_BUILD}" "${PACK_VENDOR}" "${PACK_NAME}"

  [[ ${POSTPROCESS} == 1 && "$(type -t postprocess)" == "function" ]] && postprocess

  archive "${PACK_BUILD}" "${PACK_OUTPUT}/$(cat "${PACK_OUTPUT}/PackName.txt")"

  if [[ $KEEP == 0 ]]; then
    echo "Cleaning up ${PACK_BUILD}..."
    rm -rf "${PACK_BUILD}"
    rm -f "${PACK_OUTPUT}/PackName.txt"
  fi
}
