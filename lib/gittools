#
# Open-CMSIS-Pack gen-pack Bash library
#
# Copyright (c) 2022-2023 Arm Limited. All rights reserved.
#
# Provided as-is without warranty under Apache 2.0 License
# SPDX-License-Identifier: Apache-2.0
#

#
# Get version from Git history via git describe command
#
# Usage: git_describe [<prefix>]
#   <prefix>   Optional prefix to filter tags.
#
function git_describe {
  local PREFIX="$1"

  if "${UTILITY_GIT}" rev-parse --git-dir 2>/dev/null >/dev/null; then
    local gitversion
    local patch
    local version
    gitversion=$("${UTILITY_GIT}" describe --tags --long --match "${PREFIX}*" --abbrev=7 || echo "0.0.0-dirty-1-g$("${UTILITY_GIT}" describe --tags --match "${PREFIX}*" --always --abbrev=7 2>/dev/null)")
    patch=$(sed -r -e 's/[0-9]+\.[0-9]+\.([0-9]+).*/\1/' <<< "${gitversion#"${PREFIX}"}")
    ((patch+=1))
    version=$(sed -r -e 's/-0-(g[0-9a-f]{7})//' <<< "${gitversion#"${PREFIX}"}")
    version=$(sed -r -e "s/\.[0-9]+-([0-9]+)-(g[0-9a-f]{7})/.${patch}-dev\1+\2/" <<< "${version}")
    version=$(sed -r -e "s/-([^0-9]+[0-9]+)-([0-9]+)-(g[0-9a-f]{7})/-\1.\2+\3/" <<< "${version}")
    version=$(sed -r -e "s/-([^0-9]+)-([0-9]+)-(g[0-9a-f]{7})/-\1\2+\3/" <<< "${version}")
    echo_log "Git version: '${version}'"
    echo "${version}"
  else
    echo_err "No Git repository: '0.0.0-nogit'"
    echo "0.0.0-nogit"
  fi
  set +x
}

#
# Generate header for changelog in text format
#
function git_changelog_text_head {
  true
}

#
# Generate body for changelog in text format
#
function git_changelog_text {
  if [ -z "$2" ]; then
    echo "$1"
  else
    echo "$1 ($2)"
  fi

  echo -e "$3"
}

#
# Generate footer for changelog in text format
#
function git_changelog_text_tail {
  true
}

#
# Generate header for changelog in pdsc format
#
function git_changelog_pdsc_head {
  true
}

#
# Generate body for changelog in pdsc format
#
function git_changelog_pdsc {
  echo -n "<release version=\"$1\""
  if [ -n "$2" ]; then
    echo -n " date=\"$2\""
  fi
  if [ -n "$4" ]; then
    echo -n " tag=\"$4\""
  fi
  echo ">"
  echo -e "$3" | \
    sed "s/^/  /" | \
    sed "s/<br>//" | \
    sed "s/<ul>//" | \
    sed "s/<\/ul>//" | \
    sed "s/<li>/- /" | \
    sed "s/<\/li>//" | \
    sed "s/[ ]*$//" | \
    sed "/^$/d"
  echo -e "</release>"
}

#
# Generate footer for changelog in pdsc format
#
function git_changelog_pdsc_tail {
  true
}

#
# Generate header for changelog in doxygen/markdown format
#
function git_changelog_dxy_head {
  echo "Version     | Description"
  echo ":-----------|:------------------------------------------"
}

#
# Generate body for changelog in doxygen/markdown format
#
function git_changelog_dxy {
  printf "v%-10s | %s\n" "$1" "$3"
}

#
# Generate footer for changelog in doxygen/markdown format
#
function git_changelog_dxy_tail {
  echo ""
}

#
# Generate header for changelog in doxygen/html format
#
function git_changelog_html_head {
  echo "/**"
  echo "\page rev_hist Revision History"
  echo "<table class=\"cmtable\" summary=\"Revision History\">"
  echo "<tr>"
  echo "  <th>Version</th>"
  echo "  <th>Description</th>"
  echo "</tr>"
}

#
# Generate body for changelog in doxygen/html format
#
function git_changelog_html {
  echo "<tr>"
  echo "  <td>v$1</td>"
  echo "  <td>"
  echo -e "$3" | sed "s/^/    /"
  echo "  </td>"
  echo "</tr>"
}

#
# Generate footer for changelog in doxygen/html format
#
function git_changelog_html_tail {
  echo "</table>"
  echo "*/"
}

#
# Generate changelog from Git history
#
# Setting PACK_CHANGELOG_MODE can be used to steer how the changelog text is retrieved:
#   full        Tag annotations, release descriptions, or commit messages (in order)
#   release     Tag annotations, or release descriptions (in order)
#   tag         Tag annotations only
#
# Usage: git_changelog [-f <fmt>] [-d [<msg>]] [-p <prefix>]
#   <fmt>       The outout format, defaults to text:
#               text    Plain text
#               pdsc    Pack description XML, i.e. <releases>..</releases>
#               dxy     Doxygen Markdown table
#               html    Doxygen HTML table
#   <msg>       Create devdrop release with option message.
#   <prefix>    Prefix to filter Git tags to be considered as releases
#
function git_changelog {
  local FORMAT="text"
  local DEVDROP=""
  local PREFIX=""

  while [[ $# -gt 0 ]]; do
    case $1 in
      '-f'|'--format')
        shift
        FORMAT="$1"
      ;;
      '-d'|'--devdrop')
        if [[ $2 != -* && -n "$2" ]]; then
          shift
          DEVDROP="$1"
        else
          DEVDROP="Active development ..."
        fi
      ;;
      '-p'|'--prefix')
        shift
        PREFIX="$1"
      ;;
      *)
      ;;
    esac
    shift # past argument
  done

  mapfile -t TAGS < <(\
    GIT_CONFIG_COUNT=1\
    GIT_CONFIG_KEY_0="versionsort.suffix"\
    GIT_CONFIG_VALUE_0="-"\
    "${UTILITY_GIT}" for-each-ref --format "%(refname)" --sort="-v:refname" "refs/tags/${PREFIX}*"\
  )
  local LATEST
  LATEST=$(git_describe "${PREFIX}")

  "git_changelog_${FORMAT}_head"

  if [[ -n "${DEVDROP}" ]] && !  "${UTILITY_GIT}" rev-list "${PREFIX}${LATEST}" 1>/dev/null 2>/dev/null; then
    "git_changelog_${FORMAT}" "${LATEST}" "" "${DEVDROP}"
  fi

  local TAG
  for TAG in "${TAGS[@]}"; do
    local TYPE
    local DESC
    local DATE
    TYPE="$("${UTILITY_GIT}" for-each-ref --format "%(objecttype)" "${TAG}")"
    TAG="${TAG#refs/tags/}"
    DESC="$("${UTILITY_GIT}" tag -l -n99 --format "%(contents)" "${TAG}")"
    DATE="$("${UTILITY_GIT}" tag -l -n99 --format "%(taggerdate:short)" "${TAG}")"
    if [[ -z "$DATE" ]]; then
      DATE="$( "${UTILITY_GIT}" tag -l -n99 --format "%(committerdate:short)" "${TAG}")"
    fi
    if [ "${TYPE}" = "tag" ]; then
      echo_v "Changelog for tag '${TAG}' taken from annotation message."
    elif [ "${TYPE}" = "commit" ] && [ "${PACK_CHANGELOG_MODE}" != "tag" ]; then
      if "${UTILITY_GHCLI}" release view "${TAG}" >/dev/null 2>/dev/null; then
        local RELEASE
        RELEASE="$("${UTILITY_GHCLI}" release view "${TAG}" --json "body" -t "{{ .body }}")"
        if [ -n "${RELEASE}" ]; then
          local DESC="${RELEASE}"
          echo_v "Changelog for tag '${TAG}' taken from GitHub release description."
        elif [ "${PACK_CHANGELOG_MODE}" = "full" ]; then
          echo_v "Changelog for tag '${TAG}' taken from commit message."
        else
          echo_err "Changelog generation for tag '${TAG}' failed!"
          echo_log " => Tag has no annotation message."
          echo_log " => GitHub release description is empty."
          exit 1
        fi
        DATE="$("${UTILITY_GHCLI}" release view "${TAG}" --json "publishedAt" -t "{{ timefmt \"2006-01-02\" .publishedAt }}")"
      elif [ "${PACK_CHANGELOG_MODE}" = "full" ]; then
        echo_v "Changelog for tag '${TAG}' taken from commit message."
      else
        echo_err "Changelog generation for tag '${TAG}' failed!"
        echo_log " => Tag has no annotation message."
        echo_log " => GitHub release description could not be queried."
        exit 1
      fi
    else
      echo_err "Changelog generation for tag '${TAG}' failed!"
      echo_log " => Tag has no annotation message."
      exit 1
    fi
    "git_changelog_$FORMAT" "${TAG#"${PREFIX}"}" "${DATE}" "${DESC}" "${TAG}"
  done

  "git_changelog_${FORMAT}_tail"
}
