#
# Open-CMSIS-Pack gen-pack Bash library
#
# Copyright (c) 2022-2025 Arm Limited. All rights reserved.
#
# Provided as-is without warranty under Apache 2.0 License
# SPDX-License-Identifier: Apache-2.0
#

#
# Locate Package Description file
# check whether there is more than one pdsc file
#
# Usage: locate_pdsc <folder>
#   <folder>    The folder to search for pdsc files
#
function locate_pdsc {
  local NUM_PDSCS
  local PACK_DESCRIPTION_FILE
  NUM_PDSCS=$(find . -maxdepth 1 -name "*.pdsc" | wc -l)
  PACK_DESCRIPTION_FILE=$(find . -maxdepth 1 -name "*.pdsc")
  if [[ -n "$1" && -f "$1" ]]; then
    realpath "$1"
    return 0
  elif [ "${NUM_PDSCS}" -lt 1 ]; then
    echo_err "Error: No *.pdsc file found in current directory"
    echo_err " "
    exit 1
  elif [ "${NUM_PDSCS}" -gt 1 ]; then
    echo_err "Error: Only one PDSC file allowed in directory structure:"
    echo_log "Found:"
    echo_log "$PACK_DESCRIPTION_FILE"
    echo_log "Action: Provide PDSC file explicitly!"
    echo_log " "
    exit 1
  fi
  realpath "${PACK_DESCRIPTION_FILE}"
  return 0
}

#
# Retrieve the vendor name from a pdsc file name with pattern <vendor>.<pack>.pdsc
#
# Usage: pdsc_vendor <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_vendor {
  cut -d. -f 1 <<< "$(basename "$1")"
}

#
# Retrieve the pack name from a pdsc file name with pattern <vendor>.<pack>.pdsc
#
# Usage: pdsc_name <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_name {
  cut -d. -f 2 <<< "$(basename "$1")"
}

#
# Retrieve the latest release description from a pdsc file, i.e.
# text between (not including) first <release>..</release>
# if release has no date attribute.
#
# Usage: pdsc_release_desc <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_release_desc {
  local first
  local last
  local desc
  local indent
  first=$(grep -n "<release " "$1" | grep -v "date=" | head -n 1 | cut -d: -f1)
  last=$(grep -n "</release>" "$1" | head -n 1 | cut -d: -f1)
  first=${first:-$last}
  last=${last:-$first}
  ((first+=1))
  if [[ $first -lt $last ]]; then
    ((length=last-first))
    desc="$(tail -n +${first} "$1" | head -n ${length})"
    indent=$(head -n 1 <<< "${desc}" | sed -E "s/([ ]*).*/\1/")
    sed -E "s/^${indent}//" <<< "${desc}"
    return 0
  fi
  echo_err "No release description found in $1!"
  return 1
}

#
# Updated the releases in a pdsc file with generated changelog, i.e.
# everyting between (not including) <releases>..</releases>.
#
# The changelog is generated by calling git_changelog function.
#
# Usage: pdsc_release_desc <pdsc> <output> [<prefix>]
#   <pdsc>      The pdsc file to read from.
#   <output>    The output file to write to.
#   <prefix>    Optional tag prefix for generating changelog.
#
function pdsc_update_releases {
  local PREFIX=()
  local DEV first last

  DEV=$(pdsc_release_desc "$1")
  first=$(grep -n "<releases>" "$1" | cut -d: -f1)
  if [ -z "$DEV" ]; then
    last=$first
  else
    last=$(grep -n "</release>" "$1" | cut -d: -f1 | head -n 1)
  fi
  ((last+=1))
  head -n "${first}" "$1" > "$2"
  if [ -n "$3" ]; then
    PREFIX=("-p" "$3")
  fi
  git_changelog "${PREFIX[@]}" -d "${DEV}" -f pdsc | sed "s/^/    /" >> "$2"
  tail -n +${last} "$1" >> "$2"
}

#
# Assure <CMSIS_PACK_ROOT>/.Web exists
#
# Usage: assure_pack_webdir
#
function assure_pack_webdir {
  local basedir webdir="${CMSIS_PACK_ROOT}/.Web"
  local webdir_write_protect="no"
  if [ ! -d "${webdir}" ]; then
    basedir=$(dirname "${webdir}")
    if [ -d "${basedir}" ]; then
      webdir_write_protect=$(has_write_protect "${basedir}")
      if [[ "${webdir_write_protect}" == "yes" ]]; then
        remove_write_protect "${basedir}"
      fi
    fi 
    echo_v "Creating ${webdir} ..."
    mkdir -p "${webdir}"
    if [[ "${webdir_write_protect}" == "yes" ]]; then
      set_write_protect "${basedir}"
      set_write_protect "${webdir}"
    fi
  fi
  echo "${webdir}"
  return 0
}

#
# Get pdsc cache filename in .Web dir
# 
# Usage: pdsc_cache_file <pdsc>
#   <pdsc>   Name of a pack description file in format <vendor>.<name>.pdsc
#
function pdsc_cache_file {
  local webdir="${CMSIS_PACK_ROOT}/.Web"
  local pdsc="${1}"
  pdsc=$(basename "${pdsc}")
  echo "${webdir}/${pdsc}"
}

#
# Lookup URL for a given pdsc file in a pack index file
# 
# Usage: _pidx_lookup_url <pidx> <vendor> <name>
#   <pidx>    Pack index file
#   <vendor>  Vendor name
#   <name>    Pack name
#
function _pidx_lookup_url {
  local pidx="${1}"
  local vendor="${2}"
  local name="${3}"
  local index

  index=$(grep "vendor=\"${vendor}\"" "${pidx}" | \
          grep "name=\"${name}\"" | \
          grep "url=\"[^\"]*\"")

  sed -E "s/.*url=\"([^\"]*)\".*/\1/" <<<"${index}"
}

#
# Get URL for a given pdsc file from the local_repository.pidx or index.pix
#
# Usage: pdsc_url <pdsc>
#   <pdsc>   Name of a pack description file in format <vendor>.<name>.pdsc
#
function pdsc_url {
  local pdsc="${1}"
  echo_v "Looking up URL for '${pdsc}'..."

  if is_url "${pdsc}"; then
    echo_v "Input already pointing to an URL."
    echo "${pdsc}"
    return 0
  elif [[ "$(basename "${pdsc}")" != "${pdsc}" ]]; then
    pdsc=$(realpath -m --relative-base="$(cwd)" "${pdsc}")
    if is_absolute "${pdsc}"; then
      echo_err "Reference to locale pdsc file outside of current tree not allowed!"
      pdsc="$(basename "${pdsc}")"
    else
      pdsc="file://$(cwd)/${pdsc}"
      echo_v "Using local pdsc file '${pdsc}'."
      echo "${pdsc}"
      return 0
    fi
  fi

  local vendor name index url
  local webdir="${CMSIS_PACK_ROOT}/.Web"
  local localdir="${CMSIS_PACK_ROOT}/.Local"
  local pidx="${webdir}/index.pidx"
  local localidx="${localdir}/local_repository.pidx"
  local default="https://www.keil.com/pack/${pdsc}"
  
  if [ ! -r "${pidx}" ]; then
    echo_err "Pack index at '${pidx}' is not readable!"
    echo_v "Using fallback '${default}'..."
    echo "${default}"
    return 0
  fi

  vendor=$(pdsc_vendor "${pdsc}")
  name=$(pdsc_name "${pdsc}")
  if [ -f "${localidx}" ]; then
    echo_v "... ${localidx}"
    url=$(_pidx_lookup_url "${localidx}" "${vendor}" "${name}")
  fi
  if [ -z "${url}" ]; then
    echo_v "... ${pidx}"
    url=$(_pidx_lookup_url "${pidx}" "${vendor}" "${name}")
  fi
  
  if [ -z "${url}" ]; then
    echo_log "No URL for '${pdsc}' found in pack index."
    echo_v "Using fallback '${default}'..."
    echo "${default}"
    return 0
  fi

  echo_v "Resolved URL '${url%%/}/${pdsc}'..."
  echo "${url%%/}/${pdsc}"

  return 0
}

#
# Fetch a list of PDSC files into the .Web folder
#
# Usage: fetch_pdsc_files <outvar> <pdsc> [...]
#   <outvar>   Variable to place output array with all local pdsc files to
#   <pdsc>     One or more names of pack description file(s) in format <vendor>.<name>.pdsc
#
function fetch_pdsc_files {
  local webdir webdir_write_protect
  local -n outvar=$1
  shift
  webdir=$(assure_pack_webdir)
  webdir_write_protect=$(has_write_protect "${webdir}")
  if [[ "${webdir_write_protect}" == "yes" ]]; then
    remove_write_protect "${webdir}"
  fi
  for dep in "$@"; do
    local depurl depfile
    depurl="$(pdsc_url "${dep}")"    
    if is_url "${depurl}"; then
      depfile="$(pdsc_cache_file "${dep}")"
      if [ ! -f "${depfile}" ]; then
        curl_download "${depurl}" "${depfile}"
        if [[ "${webdir_write_protect}" == "yes" ]]; then
          set_write_protect "${depfile}"
        fi
      fi
      outvar+=("${depfile}")
    elif is_file_uri "${depurl}"; then
      depfile="${depurl#file://}"
      outvar+=("${depfile#localhost/}")
    fi
  done
  if [[ "${webdir_write_protect}" == "yes" ]]; then
    set_write_protect "${webdir}"
  fi
}
