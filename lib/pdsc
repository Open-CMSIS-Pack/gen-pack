#
# Open-CMSIS-Pack gen-pack Bash library
#
# Copyright (c) 2022-2023 Arm Limited. All rights reserved.
#
# Provided as-is without warranty under Apache 2.0 License
# SPDX-License-Identifier: Apache-2.0
#

#
# Locate Package Description file
# check whether there is more than one pdsc file
#
# Usage: locate_pdsc <folder>
#   <folder>    The folder to search for pdsc files
#
function locate_pdsc {
  local NUM_PDSCS
  local PACK_DESCRIPTION_FILE
  NUM_PDSCS=$(find . -depth 1 -name "*.pdsc" | wc -l)
  PACK_DESCRIPTION_FILE=$(find . -depth 1 -name "*.pdsc")
  if [[ -n "$1" && -f "$1" ]]; then
    realpath "$1"
    return 0
  elif [ "${NUM_PDSCS}" -lt 1 ]; then
    echo_err "Error: No *.pdsc file found in current directory"
    echo_err " "
    exit 1
  elif [ "${NUM_PDSCS}" -gt 1 ]; then
    echo_err "Error: Only one PDSC file allowed in directory structure:"
    echo_log "Found:"
    echo_log "$PACK_DESCRIPTION_FILE"
    echo_log "Action: Provide PDSC file explicitly!"
    echo_log " "
    exit 1
  fi
  realpath "${PACK_DESCRIPTION_FILE}"
  return 0
}

#
# Retrieve the vendor name from a pdsc file name with pattern <vendor>.<pack>.pdsc
#
# Usage: pdsc_vendor <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_vendor {
  cut -d. -f 1 <<< "$(basename "$1")"
}

#
# Retrieve the pack name from a pdsc file name with pattern <vendor>.<pack>.pdsc
#
# Usage: pdsc_name <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_name {
  cut -d. -f 2 <<< "$(basename "$1")"
}

#
# Retrieve the latest release description from a pdsc file, i.e.
# text between (not including) first <release>..</release>
# if release has no date attribute.
#
# Usage: pdsc_release_desc <pdsc>
#   <pdsc>    The pdsc file
#
function pdsc_release_desc {
  local first
  local last
  local desc
  local indent
  first=$(grep -n "<release " "$1" | grep -v "date=" | head -n 1 | cut -d: -f1)
  last=$(grep -n "</release>" "$1" | head -n 1 | cut -d: -f1)
  first=${first:-$last}
  last=${last:-$first}
  ((first+=1))
  if [[ $first -lt $last ]]; then
    ((length=last-first))
    desc="$(tail -n +${first} "$1" | head -n ${length})"
    indent=$(head -n 1 <<< "${desc}" | sed -E "s/([ ]*).*/\1/")
    sed -E "s/^${indent}//" <<< "${desc}"
    return 0
  fi
  echo_err "No release description found in $1!"
  return 1
}

#
# Updated the releases in a pdsc file with generated changelog, i.e.
# everyting between (not including) <releases>..</releases>.
#
# The changelog is generated by calling git_changelog function.
#
# Usage: pdsc_release_desc <pdsc> <output> [<prefix>]
#   <pdsc>      The pdsc file to read from.
#   <output>    The output file to write to.
#   <prefix>    Optional tag prefix for generating changelog.
#
function pdsc_update_releases {
  local PREFIX=()
  local DEV
  local first
  local last

  DEV=$(pdsc_release_desc "$1")
  first=$(grep -n "<releases>" "$1" | cut -d: -f1)
  if [ -z "$DEV" ]; then
    last=$first
  else
    last=$(grep -n "</release>" "$1" | cut -d: -f1 | head -n 1)
  fi
  ((last+=1))
  head -n "${first}" "$1" > "$2"
  if [ -n "$3" ]; then
    PREFIX=("-p" "$3")
  fi
  git_changelog "${PREFIX[@]}" -d "${DEV}" -f pdsc | sed "s/^/    /" >> "$2"
  tail -n +${last} "$1" >> "$2"
}
