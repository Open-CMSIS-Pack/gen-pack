
function locate_pdsc {
  # Locate Package Description file
  # check whether there is more than one pdsc file
  local NUM_PDSCS=$(ls -1 *.pdsc | wc -l)
  local PACK_DESCRIPTION_FILE=$(ls *.pdsc)
  if [[ -n "$1" && -f "$1" ]]; then
    realpath "$1"
    return 0
  elif [ ${NUM_PDSCS} -lt 1 ]; then
    echo "Error: No *.pdsc file found in current directory" >&2
    echo " " >&2
    exit 1
  elif [ ${NUM_PDSCS} -gt 1 ]; then
    echo "Error: Only one PDSC file allowed in directory structure:" >&2
    echo "Found:" >&2
    echo "$PACK_DESCRIPTION_FILE" >&2
    echo "Action: Provide PDSC file explicitly!" >&2
    echo " " >&2
    exit 1
  fi
  realpath "${PACK_DESCRIPTION_FILE}"
  return 0
}

function pdsc_vendor {
  cut -d. -f 1 <<< $(basename $1)
}

function pdsc_name {
  cut -d. -f 2 <<< $(basename $1)
}

function pdsc_update_releases {
  local first=$(grep -n "<release " "$1" | cut -d: -f1)
  local last=$(grep -n "</release>" "$1" | cut -d: -f1)
  last=${last:-$first}
  let first+=1
  if [[ $first < $last ]]; then
    let length=last-first
    local DEV="$(tail -n +${first} "$1" | head -n ${length})"
    local indent=$(head -n 1 <<< "${DEV}" | sed -E "s/([ ]*).*/\1/")
    DEV=$(sed -E "s/^${indent}//" <<< "${DEV}")
  fi

  local first=$(grep -n "<releases>" "$1" | cut -d: -f1)
  local last=$(grep -n "</releases>" "$1" | cut -d: -f1)
  let first-=1
  let last+=1
  head -n ${first} "$1" > "$2"
  local PREFIX=""
  if [ -n "$3" ]; then
    local PREFIX="-p $3"
  fi
  git_changelog ${PREFIX} -d "${DEV}" -f pdsc | sed "s/^/  /" >> "$2"
  tail -n +${last} "$1" >> "$2"
}
