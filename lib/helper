#
# Open-CMSIS-Pack gen-pack Bash library
#
# Copyright (c) 2022-2024 Arm Limited. All rights reserved.
#
# Provided as-is without warranty under Apache 2.0 License
# SPDX-License-Identifier: Apache-2.0
#

#
# Sanity check locale setting (LANG)
# 
# Usage: check_locale
#
function check_locale {
  local UTF8="\\.(UTF|utf)(-)?8$"
  if [[ "${LANG}" =~ $UTF8 ]]; then
    echo_v "Found LANG=${LANG} set to UTF-8 locale."
    return 0
  fi
  
  if [ -z "${LANG}" ]; then
    echo_err "LANG is not set!"
  else
    echo_err "LANG is set to non-UTF locale '${LANG}'!"
  fi
  echo_log "gen-pack needs UTF-8 environment to work."
  echo_log "Consider setting LANG to your locale!"
  case $(uname -s) in
    'WindowsNT'|MINGW*|CYGWIN*)
      echo_log "E.g., export LANG=\$(locale -s -U)"
      LANG="$(locale -s -U 2>/dev/null || echo "en_US.UTF-8")"
      ;;
    *)
      echo_log "E.g., export LANG=en_US.UTF-8"
      LANG="en_US.UTF-8"
      ;;
  esac
  echo_log "Going on with LANG=${LANG} ..."

  return 1
}

#
# Sanity check settings
#
# Usage: check_placeholder <var>
#  <var>   The Bash variable name to check for placeholders  
#
function check_placeholder {
  local re=".*<.*>.*"
  if [[ "${!1}" =~ $re ]]; then
    echo_err "Variable '$1' contains placeholder '<..>'"
    echo_log "Remove placeholders from gen-pack settings!"
    exit 1
  fi
}

#
# Get filesystem permissions
# Returns the octal representation for Unix file permissions.
#
# Usage: get_perms <path>
#  <path>   File or directory to get permissions for
#
function get_perms {
  case $(uname -s) in
    'WindowsNT'|MINGW*|CYGWIN*)
      echo "777"
      echo_log "Filesystem permissions not supported on Windows"
    ;;
    *)
      if [ -e "$1" ]; then
        stat -c "%a" "$1"
        return $?
      else
        get_perms "$(dirname "$1")"
      fi
    ;;
  esac
  return 1
}

#
# Check a file/folder's write flag
# Returns yes if no write permission flag is set.
#
# Usage: has_write_protect <path>
#  <path>   File or directory to get write permission for
#
function has_write_protect {
  local perms result
  perms="$(get_perms "$1")"
  result=$?
  if [ $((8#${perms} & 8#222)) -eq 0 ]; then
    echo_v "has_write_protect $1 => yes (${perms})"
    echo "yes"
    return $result
  fi
  echo_v "has_write_protect $1 => no (${perms})"
  echo "no"
  return $result
}

#
# Remove a file/folder's write flag
#
# Usage: set_write_protect <path>
#  <path>   File or directory to remove all write permissions for
#
function set_write_protect {
  case $(uname -s) in
    'WindowsNT'|MINGW*|CYGWIN*)
      echo_log "set_write_protect not supported on Windows"
    ;;
    *)
      echo_v "set_write_protect $1"
      chmod a-w "$1"
      return $?
    ;;
  esac
  return 1
}

#
# Set a file/folder's user-write flag
#
# Usage: remove_write_protect <path>
#  <path>   File or directory to set user-write permission for
#
function remove_write_protect {
  case $(uname -s) in
    'WindowsNT'|MINGW*|CYGWIN*)
      echo_log "remove_write_protect not supported on Windows"
    ;;
    *)
      echo_v "remove_write_protect $1"
      chmod u+w "$1"
      return $?
    ;;
  esac
  return 1
}

#
# Check if a filename denotes a remote URL
#
# Usage: is_url <filename>
#  <filename>    Name of a file or a remote http(s):// URL
#
function is_url {
  local re="^http(s)?://"
  if [[ "${1}" =~ $re ]]; then
    return 0
  fi
  return 1
}

#
# Check if a filename denotes a local file URI
#
# Usage: is_file_uri <filename>
#  <filename>    Name of a file or file:// URI
#
function is_file_uri {
  local re="^file://"
  if [[ "${1}" =~ $re ]]; then
    return 0
  fi
  return 1
}

#
# Check if a filename denotes an absolute path
#
# Usage: is_absolute <filename>
#  <filename>   Path or filename to check
#
function is_absolute {
  local re="^/"
  if [[ "${1}" =~ $re ]]; then
    return 0
  fi
  return 1
}

#
# Detect the end of line style used in a file
#
# Usage: detect_eol_style <file>
#  <file>   File to analyze
#
function detect_eol_style {
  local file="$1"
  file="$(realpath "${file}")"
  if [ ! -r "${file}" ]; then
    echo_err "File '${file}' does not exist!"
    return 1
  fi

  eol=$(head -1 "${file}"                    | \
          cat -vet                           | \
          sed -E 's/\^[^M]//'                | \
          sed -E 's/[^^$]*((\^.|\$)*).*/\1/' | \
          sed -E 's/\^M/CR/'                 | \
          sed -E 's/\$/LF/'
        )
  
  echo "${eol:-LF}"
}

#
# Convert the end of line style 
#
# Usage: convert_eol <to> <file> [<file>...]
#  <to>     End of line style
#  <file>   One or more files to convert
#
function convert_eol {
  local from to=$1
  shift
  for f in "$@"; do
    from=$(detect_eol_style "$f")
    local convert="${UTILITY_EOL_CONVERTER["${from}-to-${to}"]}" 
    if [ -x "${convert}" ]; then
      echo_v "$("${convert}" "$f" 2>&1)"
    elif [[ "${from}" != "${to}" ]]; then
      echo_log "No eol converter for ${from}-to-${to}"
    fi
  done
}
